@model SCS.Models.Order

@{
    ViewBag.Title = "Изменить";
}
<div class="container">
    <div class="divTable">
        <h4>
            <b>Изменить данные о заказе</b>
        </h4>

        @using (Html.BeginForm())
        {
            int countTransport = 0;
            @Html.AntiForgeryToken()

            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            <div class="form-group">
                <div class="col-md-10">
                    @Html.LabelFor(model => model.DateStart)
                    <input type="datetime-local" id="dateStart" name="dateStart" value="@ViewData["DateOrder"]" date-format="m/d/yyyy hh:mm"
                           min="@ViewData["DateOrder"]" class="form-control" title="Дата начала действия заказа" required onchange="changeDate()">
                    @Html.ValidationMessageFor(model => model.DateStart, "", new { @class = "text-danger" })
                </div>
            </div>
            <h4>Транспорт</h4>
            <hr />

            <div id="transport">

                @{
                    var createRate = ViewBag.createRate;
                }
                @foreach (var trList in (List<List<SelectListItem>>)ViewData["TransportList"])
                {

                    <div class="moreInformationOrder">
                        <div class="form-group">
                            <div class="col-md-10">
                                @if (!createRate)
                                {
                                    <label>Тариф</label>
                                    @Html.DropDownList(
                                                       "RatesIdTransport",
                                                       (List<SelectListItem>)ViewData["RatesIdTransport"],
                                                       htmlAttributes: new { @class = "Rate form-control", @onchange = "calculatePrice()", @id = "Rates", @required = "required" })

                                    createRate = true;
                                }
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-10">
                                <label>Наименование </label>
                                @Html.DropDownList("TransportList-" + countTransport, (List<SelectListItem>)trList, new { @class = "Transport form-control", id = string.Format("Transport-{0}", countTransport) })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-10 accessories">
                                <label>Количество (Доступно: <label id="availableTransport-@countTransport" style="margin-bottom:0;">0</label> шт.)</label>
                                <input type="number" min="0" name="countTransport" id="countTransport-@countTransport" class="form-control countTransport" value="0" onchange="checkValueTransport(this);" />
                            </div>
                        </div>

                        <button type="button" class="close bg-white border-0" aria-label="Close" onclick="deleteBlock('transport-@countTransport',true)">
                            <span aria-hidden="true" class="h5">&times;</span>
                        </button>


                    </div>

                    countTransport++;
                }
            </div>

            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="+" id="addTransport" class="btn btn-outline-dark mt-2" />
            </div>
            <br />

            <h4>Оплата </h4>
            <hr />
            <div class="moreInformationOrder mb-2">
                <div class="col-md-10">
                    <label>Скидка, руб</label>
                    <input type="number" class="form-control" name="Discount" id="Discount" min="0" max="999999" value=@Convert.ToDouble(Model.Discount) onchange="calculateLeftToPay()" />
                    @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="moreInformationOrder mb-2">

                <div class="form-group">
                    <div class="col-md-10">
                        <label>Оплата наличными</label>
                        <input type="number" class="form-control" name="CashPayment" id="CashPayment" value=@Convert.ToDouble(Model.Payment.CashPayment) min="0" max="999999" onchange="calculateLeftToPay()" />
                        @Html.ValidationMessageFor(model => model.Payment.CashPayment, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-10">
                        <label>Оплата картой</label>
                        <input type="number" class="form-control" name="CardPayment" id="CardPayment" value=@Convert.ToDouble(Model.Payment.CardPayment) min="0" max="999999" onchange="calculateLeftToPay()" />
                        @Html.ValidationMessageFor(model => model.Payment.CardPayment, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label>Залог наличными</label>
                        <input type="number" class="form-control" name="CashDeposit" id="CashDeposit" value=@Convert.ToDouble(Model.Payment.CashDeposit) min="0" max="999999" onchange="calculateLeftToPay()" />
                        @Html.ValidationMessageFor(model => model.Payment.CashDeposit, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-10">
                        <label>Залог картой</label>
                        <input type="number" class="form-control" name="CardDeposit" id="CardDeposit" value=@Convert.ToDouble(Model.Payment.CardDeposit) min="0" max="999999" onchange="calculateLeftToPay()" />
                        @Html.ValidationMessageFor(model => model.Payment.CardDeposit, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        <label>Документ</label>

                        @Html.DropDownList("TypeDocumentId", null, htmlAttributes: new { @class = "form-control" })
                        @*@Html.ValidationMessageFor(model => model.Payment.TypeDocument, "", new { @class = "text-danger" })*@
                    </div>
                    <div class="col-md-10">
                        <label>Оплата бонусами, руб</label>
                        <input type="number" class="form-control" name="BonusPayment" id="BonusPayment" min="0" max="999999" value=@Convert.ToDouble(Model.Payment.BonusPayment) onchange="calculateLeftToPay()" readonly />
                        @Html.ValidationMessageFor(model => model.Payment.BonusPayment, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="moreInformationOrder mb-2">

                <div class="col-md-10">
                    <label>Примечание</label>
                    <input type="text" class="form-control" name="Note" id="Note" value="@Model.Note" />
                </div>
            </div>
            <div class="form-group mb-2" id="totalDiv">
                <label>Осталось оплатить: </label>
                <label id="LeftToPay">0</label>
                <label> руб</label>
            </div>
            <div class="form-group mb-2" id="totalDiv">
                <b>
                    <label>Всего к оплате: </label>
                    @Html.LabelFor(model => model.Payment.TotalSum, (string)@ViewBag.TotalSum)
                    <label> руб</label>
                </b>
            </div>
            <input type="submit" value="Сохранить" class="btn btn btn-primary ml-0 " />
            <a class="btn btn btn-danger " href="@Url.Action("Index","Orders")">
                Отмена
            </a>
            <br />
        }

    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        calculateLeftToPay();
    });
    function calculateLeftToPay() {
        var lpay = document.getElementById("LeftToPay");
        lpay.innerHTML = Number(@ViewBag.TotalSum) -
            Number(document.getElementById("CashPayment").value)-
            Number(document.getElementById("CardPayment").value) -
            Number(document.getElementById("Discount").value) -
            @Model.Payment.BonusPayment;

    }
</script>
<script>
    $(document).ready(function () {
        var countTransport = document.getElementsByClassName("Transport");

        if (countTransport.length >= document.getElementById("Transport-0").length - 1) {
            document.getElementById("addTransport").hidden = true;
        }
    });
    //Добавление транспорта
    $("#addTransport").click(function () {
        $.ajax({
            url: '../AddDropListTransport',
            datatype: 'html',
            data: {
                dateTime: document.getElementById("dateStart").value
            },
            success: function (data) {
                $("#transport").append(data);
                var countTransport = document.getElementsByClassName("Transport");

                if (countTransport.length >= document.getElementById("Transport-0").length - 1) {
                    document.getElementById("addTransport").hidden = true;
                }
            }
        })
    });
    //Добавление аксессуара
    $("#addAccessories").click(function () {
        $.ajax({
            url: 'AddDropListAccessories',
            datatype: 'html',
            data: {
                dateTime: document.getElementById("dateStart").value
            },
            success: function (data) {
                $("#accessories").append(data);
                var countAccessories = document.getElementsByClassName("Accessories");

                if (countAccessories.length >= document.getElementById("Accessories-0").length - 1) {
                    document.getElementById("addAccessories").hidden = true;
                }
            }
        })
    });
</script>
@Scripts.Render("~/bundles/jqueryval")

<script src="~/Scripts/select2/i18n/ru.js"></script>
<script src="~/Scripts/select2/select2.full.min.js"></script>
<script src="~/Scripts/select2/select2.js"></script>
